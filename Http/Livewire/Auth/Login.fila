<?php

declare(strict_types=1);

namespace Modules\LU\Http\Livewire\Auth;

use DanHarrin\LivewireRateLimiting\Exceptions\TooManyRequestsException;
use DanHarrin\LivewireRateLimiting\WithRateLimiting;
use Filament\Facades\Filament;
use Filament\Forms\ComponentContainer;
use Filament\Forms\Components\Checkbox;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Concerns\InteractsWithForms;
use Filament\Forms\Contracts\HasForms;
use Filament\Http\Responses\Auth\Contracts\LoginResponse;
use Illuminate\Contracts\View\View;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\ValidationException;
use Livewire\Component;
use Modules\Cms\Actions\GetViewAction;
use Modules\LU\Models\User;

/**
 * @property ComponentContainer $form
 */
class Login extends Component implements HasForms {
    use InteractsWithForms;
    use WithRateLimiting;

    public $email = '';

    public $password = '';

    public $remember = false;

    public function mount(): void {
        if (Filament::auth()->check()) {
            redirect()->intended(Filament::getUrl());
        }

        $this->form->fill();
    }

    public function authenticate(): ?LoginResponse {
        try {
            $this->rateLimit(5);
        } catch (TooManyRequestsException $exception) {
            throw ValidationException::withMessages(['email' => __('filament::login.messages.throttled', ['seconds' => $exception->secondsUntilAvailable, 'minutes' => ceil($exception->secondsUntilAvailable / 60)])]);
        }

        $data = $this->form->getState();
        $username_field = 'handle';

        /*
        if (! Filament::auth()->attempt([
            'email' => $data['email'],
            'password' => $data['password'],
        ], $data['remember'])) {
            throw ValidationException::withMessages(['email' => __('filament::login.messages.failed')]);
        }
        */
        if (isset($data['ente']) && isset($data['matr'])) {
            $data['username'] = $data['ente'].'-'.$data['matr'];
        }
        $user = null;

        if (isset($data['username'])) {
            $user = User::query()->where($username_field, $data['username'])->first();
        }
        if (isset($data['email'])) {
            $user = User::query()->where('email', $data['email'])->first();
        }
        if (null == $user) {
            throw ValidationException::withMessages(['email' => __('filament::login.messages.failed')]);
        }

        if (isset($user) && isset($data['password']) && $user->passwd === md5($data['password'])) {
            Auth::login($user, $data['remember']);
            $auth = Auth::loginUsingId($user->getKey(), $data['remember']);
        } else {
            throw ValidationException::withMessages(['email' => __('filament::login.messages.failed')]);
        }
        session()->regenerate();

        return app(LoginResponse::class);
    }

    protected function getFormSchema(): array {
        return [
            TextInput::make('email')
                ->label(__('filament::login.fields.email.label'))
                ->email()
                ->required()
                ->autocomplete(),
            TextInput::make('password')
                ->label(__('filament::login.fields.password.label'))
                ->password()
                ->required(),
            Checkbox::make('remember')
                ->label(__('filament::login.fields.remember.label')),
        ];
    }

    public function render(): View {
        $view = app(GetViewAction::class)->execute();

        return view($view)
            ->layout('filament::components.layouts.card', [
                'title' => __('filament::login.title'),
            ]);
    }
}
