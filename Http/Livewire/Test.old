<?php

namespace Modules\LU\Http\Livewire;

use Illuminate\Session\SessionManager;
//use Illuminate\Support\Carbon;
use Livewire\Component;
use Livewire\WithPagination;
use Modules\LU\Models\User;
use Modules\Xot\Services\PanelService;

class Test extends Component {
    use WithPagination;

    public $route_params = [];
    public $data = [];
    public $in_admin = false;
    public $isOpen = 0;

    public function mount(SessionManager $session) {
        $this->route_params = request()->route()->parameters();
        $this->data = request()->all();
        $this->in_admin = inAdmin();
    }

    public function getPanelProperty() {
        return PanelService::make()->getByParams($this->route_params);
    }

    /**
     * Render the component.
     *
     * @return \Illuminate\View\View
     */
    public function render():\Illuminate\Contracts\Support\Renderable {
        $view = 'lu::livewire.test';
        if ($this->in_admin) {
            $view = 'lu::admin.livewire.test';
        }
        $rows = $this->panel->getRows()->paginate(20);

        //$fields = $this->panel->getFields(['act'=>'index']);
        $view_params = [
            'view' => $view,
            //'panel' => $this->panel,
            'rows' => $rows,
            //'fields' => $this->fields,
        ];

        return view($view, $view_params);
    }

    private function resetInputFields():array {
        $this->handle = '';
        $this->first_name = '';
        $this->last_name = '';
        $this->email = '';
        $this->auth_user_id = '';
    }

    public function store() {
        $validatedDate = $this->validate([
            'first_name' => 'required',
            'last_name' => 'required',
            'email' => 'required|email',
        ]);

        User::create($validatedDate);

        session()->flash('message', 'Users Created Successfully.');

        $this->resetInputFields();

        $this->emit('userStore'); // Close model to using to jquery
    }

    //https://www.nicesnippets.com/blog/laravel-8-jetstream-livewire-crud-app-example

    public function edit($id) {
        //$this->updateMode = true;
        //$user = User::where('auth_user_id', $id)->first();

        /*
        $user = User::find($id);
        $this->auth_user_id = $id;
        $this->first_name = $user->first_name;
        $this->email = $user->email;
        */
        $this->openModal();
    }

    public function cancel() {
        $this->updateMode = false;
        $this->resetInputFields();
    }

    public function update() {
        $validatedDate = $this->validate([
            'first_name' => 'required',
            'email' => 'required|email',
        ]);

        if ($this->user_id) {
            $user = User::find($this->user_id);
            $user->update([
                'first_name' => $this->first_name,
                'email' => $this->email,
            ]);
            $this->updateMode = false;
            session()->flash('message', 'Users Updated Successfully.');
            $this->resetInputFields();
        }
    }

    public function delete($id) {
        if ($id) {
            User::where('auth_user_id', $id)->delete();
            session()->flash('message', 'Users Deleted Successfully.');
        }
    }

    public function openModal() {
        $this->isOpen = true;
    }

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    public function closeModal() {
        $this->isOpen = false;
    }
}
