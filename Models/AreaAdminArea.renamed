<?php

declare(strict_types=1);

namespace Modules\LU\Models;

//use Illuminate\Database\Eloquent\Relations\Pivot;
////use Laravel\Scout\Searchable;
use Illuminate\Contracts\View\View as ViewContract;
use Illuminate\View\View;
use Modules\Theme\Services\ThemeService;

//use Modules\Xot\Traits\Updater;

/**
 * Modules\LU\Models\AreaAdminArea.
 *
 * @property int                              $id
 * @property int|null                         $area_id
 * @property int|null                         $perm_user_id
 * @property \Illuminate\Support\Carbon|null  $created_at
 * @property \Illuminate\Support\Carbon|null  $updated_at
 * @property string|null                      $created_by
 * @property string|null                      $updated_by
 * @property \Modules\LU\Models\Area|null     $area
 * @property mixed                            $area_define_name
 * @property mixed                            $icon_src
 * @property mixed                            $title
 * @property mixed                            $url
 * @property \Modules\LU\Models\PermUser|null $permUser
 *
 * @method static \Illuminate\Database\Eloquent\Builder|AreaAdminArea newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|AreaAdminArea newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|AreaAdminArea query()
 * @method static \Illuminate\Database\Eloquent\Builder|AreaAdminArea whereAreaId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|AreaAdminArea whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|AreaAdminArea whereCreatedBy($value)
 * @method static \Illuminate\Database\Eloquent\Builder|AreaAdminArea whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|AreaAdminArea wherePermUserId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|AreaAdminArea whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|AreaAdminArea whereUpdatedBy($value)
 * @mixin \Eloquent
 *
 * @property string|null $deleted_at
 * @property string|null $deleted_by
 * @property string|null $deleted_ip
 * @property string|null $created_ip
 * @property string|null $updated_ip
 * @property string|null $guid
 *
 * @method static \Illuminate\Database\Eloquent\Builder|AreaAdminArea whereCreatedIp($value)
 * @method static \Illuminate\Database\Eloquent\Builder|AreaAdminArea whereDeletedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|AreaAdminArea whereDeletedBy($value)
 * @method static \Illuminate\Database\Eloquent\Builder|AreaAdminArea whereDeletedIp($value)
 * @method static \Illuminate\Database\Eloquent\Builder|AreaAdminArea whereGuid($value)
 * @method static \Illuminate\Database\Eloquent\Builder|AreaAdminArea whereUpdatedIp($value)
 */
class AreaAdminArea extends BasePivot {
    //use Searchable;
    //use Updater;
/**
 * Indicates whether attributes are snake cased on arrays.
 *
 * @see  https://laravel-news.com/6-eloquent-secrets
* 
 * @var bool
 */
 public static $snakeAttributes = true;

protected $perPage = 30;

    //protected $connection = 'liveuser_general'; // this will use the specified database conneciton
    /**
     * @var string
     */
    //protected $table = 'liveuser_area_admin_areas';
    /**
     * @var string
     */
    //protected $primaryKey = 'id'; //array da errore su hasManyThrough
    /**
     * @var string[]
     */
    protected $fillable = ['id', 'area_id', 'perm_user_id'];
    /**
     * @var string[]
     */
    protected $appends = ['title', 'url', 'icon_src'];

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function area() {
        //return $this->belongsTo(Area::class, 'area_id', 'area_id');
        return $this->belongsTo(Area::class);
    }

    /**
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
     */
    public function permUser() {
        //return $this->belongsTo(PermUser::class, 'perm_user_id', 'perm_user_id');
        return $this->belongsTo(PermUser::class);
    }

    //------------MUTATORS -------------

    /**
     * @param mixed $value
     *
     * @return string
     */
    public function getAreaDefineNameAttribute($value) {
        $area = $this->area;
        if (! is_object($area)) {
            return $value;
        }

        return $area->area_define_name;
    }

    /**
     * @param mixed $value
     *
     * @return string|string[]
     */
    public function getTitleAttribute($value) {
        $title = $this->area_define_name;
        $title = str_replace('_', ' ', $title);

        return $title;
    }

    /**
     * @param mixed $value
     *
     * @return mixed
     */
    public function getUrlAttribute($value) {
        $area = $this->area;
        if (! is_object($area)) {
            return $value;
        }

        return $area->url;
    }

    /**
     * @param mixed $value
     *
     * @return mixed
     */
    public function getIconSrcAttribute($value) {
        $area = $this->area;
        if (! is_object($area)) {
            return $value;
        }

        return $area->icon_src;
    }

    public function dashboard_widget(): ViewContract {
        $view = \mb_strtolower($this->area_define_name).'::admin.dashboard_widget';
        $view_params = ['row' => $this];
        if (view()->exists($view)) {
            //return view($view)->with('row', $this);
            return view()->make($view)->with('row', $this);
        } else {
            //return view('lu::admin.dashboard_widget_default')->with('row', $this);
            return view()->make('lu::admin.dashboard_widget_default', $view_params);
        }
    }

    /**
     * @return \Illuminate\Contracts\Foundation\Application|\Illuminate\Contracts\Routing\UrlGenerator|string
     */
    public function a_href() {
        return url('admin/'.\mb_strtolower($this->area_define_name));
    }

    //-----------------------------------------------------------------------------

    /**
     * @return bool|mixed|string
     */
    public function icon_src() {
        $src = \mb_strtolower($this->area_define_name.'::img/icon.png');

        return ThemeService::asset($src);
    }
}//---end class