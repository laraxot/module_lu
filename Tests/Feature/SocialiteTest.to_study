<?php

namespace Modules\LU\Tests\Feature;

/*
* https://stefanzweifel.io/posts/how-i-write-integration-tests-for-laravel-socialite-powered-apps/
*
**/

//-----  MODELS  -----
use Laravel\Socialite\Contracts\Factory as Socialite;
use Modules\LU\Models\User;
use Tests\TestCase;

class SocialiteTest extends TestCase {
    /** @test */
    public function it_redirects_to_github() {
        $response = $this->call('GET', '/oauth/github/redirect');

        $this->assertContains('github.com/login/oauth', $response->getTargetUrl());
    }

    /** @test */
    public function it_retrieves_github_request_and_creates_a_new_user() {
        // Mock the Facade and return a User Object with the email 'foo@bar.com'
        $this->mockSocialiteFacade('foo@bar.com');

        $this->visit('/oauth/github/handle')
            ->seePageIs('/home');

        $this->seeInDatabase('users', [
            'email' => 'foo@bar.com',
        ]);
    }

    /**
     * Mock the Socialite Factory, so we can hijack the OAuth Request.
     *
     * @param string $email
     * @param string $token
     * @param int    $id
     */
    public function mockSocialiteFacade($email = 'foo@bar.com', $token = 'foo', $id = 1) {
        $socialiteUser = $this->createMock(Laravel\Socialite\Two\User::class);
        $socialiteUser->token = $token;
        $socialiteUser->id = $id;
        $socialiteUser->email = $email;

        $provider = $this->createMock(Laravel\Socialite\Two\GithubProvider::class);
        $provider->expects($this->any())
        ->method('user')
        ->willReturn($socialiteUser);

        $stub = $this->createMock(Socialite::class);
        $stub->expects($this->any())
        ->method('driver')
        ->willReturn($provider);

        // Replace Socialite Instance with our mock
        $this->app->instance(Socialite::class, $stub);
    }
}//end class
