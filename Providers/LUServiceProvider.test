<?php

namespace Modules\LU\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Database\Eloquent\Factory;

use Illuminate\Support\Str;
use Illuminate\Support\Collection;

use Illuminate\Database\Eloquent\Relations\Relation; // per dizionario morph 

class LUServiceProvider extends ServiceProvider
{
    /**
     * Boot the application events.
     *
     * @return void
     */
    public function boot()
    {
        $this->registerTranslations();
        $this->registerConfig();
        $this->registerViews();
        $this->registerFactories();
        $this->loadMigrationsFrom(__DIR__ . '/../Database/Migrations');
        $this->commands([
            \Modules\LU\Console\CreateUserCommand::class,
        ]);
        /*
        if(in_admin()){
            $mod_models=$this->getModels();
            $xra_models=config('xra.model');
            $merge_models=array_merge($xra_models,$mod_models);
            \Config::set('xra.model', $merge_models);
            Relation::morphMap($merge_models);
        }
        */
    }

    /*
    public static function getModels(){
        $mod_path=__DIR__ . '/../Models';
        $files = \File::files($mod_path);
        $mod='LU';
        $ns='Modules\\'.$mod.'\\Models';
        $data=[]; 
        //$ns='Modules\\'.$mod->name.'\\Models';  // con la barra davanti non va il search ?
        //$models=config('xra.model');
        //ddd($model_coll); 
        //$related_type=collect(config('xra.model'))
        foreach($files as $file){
            $filename=$file->getRelativePathname();
            $ext='.php';
            if(ends_with($filename,$ext)){
                $tmp=new \stdClass();
                $name=substr(($filename),0,-strlen($ext));
                $tmp->class=$ns.'\\'.$name;
                if($name!='LU'){ 
                    $name=Str::snake($name);
                }
                $tmp->name=$name;
                //$data[]=$tmp;
                $data[$tmp->name]=$tmp->class;
            }
        }
        return $data;
    }
    */

    /**
     * Register the service provider.
     *
     * @return void
     */
    public function register()
    {
        $this->app->register(RouteServiceProvider::class);
    }

    /**
     * Register config.
     *
     * @return void
     */
    protected function registerConfig()
    {
        $this->publishes([
            __DIR__.'/../Config/config.php' => config_path('lu.php'),
        ], 'config');
        $this->mergeConfigFrom(
            __DIR__.'/../Config/config.php', 'lu'
        );
    }

    /**
     * Register views.
     *
     * @return void
     */
    public function registerViews()
    {	
        $sourcePath = realpath(__DIR__.'/../Resources/views');
		/*
        $viewPath = resource_path('views/modules/lu');


        $this->publishes([
            $sourcePath => $viewPath
        ],'views');

        $this->loadViewsFrom(array_merge(array_map(function ($path) {
            return $path . '/modules/lu';
        }, \Config::get('view.paths')), [$sourcePath]), 'lu');
		*/
		$this->loadViewsFrom($sourcePath,'lu');
    }

    /**
     * Register translations.
     *
     * @return void
     */
    public function registerTranslations()
    {
        $langPath = resource_path('lang/modules/lu');

        if (is_dir($langPath)) {
            $this->loadTranslationsFrom($langPath, 'lu');
        } else {
            $this->loadTranslationsFrom(__DIR__ .'/../Resources/lang', 'lu');
        }
    }

    /**
     * Register an additional directory of factories.
     *
     * @return void
     */
    public function registerFactories()
    {
        if (! app()->environment('production')) {
            app(Factory::class)->load(__DIR__ . '/../Database/factories');
        }
    }

    /**
     * Get the services provided by the provider.
     *
     * @return array
     */
    public function provides()
    {
        return [];
    }
}
